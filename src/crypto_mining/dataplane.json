{
    "ingress-path": {
        "name": "Packets feature extractor",
        "code": "/**\n * eBPF C program to be dynamically injected in the kernel.\n * The aim of this program is to extract some info concerning many packets passing through the interface in order to prevent a possible attack.\n * By now the following protocols are checked:\n *  - TCP\n *  - UDP\n *\n * VERSION: 1.0\n */\n\n/*Protocol types according to the standard*/\n#define IPPROTO_TCP 6\n#define IPPROTO_UDP 17\n\n/* Number of max TCP session tracked */\n#define N_SESSION 10000\n\n/*Features to be exported*/\nstruct features {\n    //Real features\n    uint64_t n_packets;                             // Number of packets on one direction\n    uint64_t n_packets_reverse;                     // Number of packets on opposite direction\n    uint64_t n_bytes;                               // Total bytes on one direction\n    uint64_t n_bytes_reverse;                       // Total bytes on opposite direction\n    uint64_t start_timestamp;                       // Connection begin timestamp\n    uint64_t alive_timestamp;                       // Last message received timestamp\n    uint32_t server_ip;                             // The IP of the server\n    uint32_t method;                                // The method used to determine the server\n} __attribute__((packed));\n\n/*Session identifier*/\nstruct session_key {\n    __be32 saddr;                                   //IP source address\n    __be32 daddr;                                   //IP dest address\n    __be16 sport;                                   //Source port\n    __be16 dport;                                   //Dest port\n    __u8   proto;                                   //Protocol ID\n} __attribute__((packed));\n\n/*Ethernet Header => https://github.com/torvalds/linux/blob/master/include/uapi/linux/if_ether.h (slightly different)*/\nstruct eth_hdr {\n    __be64 dst: 48;\n    __be64 src: 48;\n    __be16 proto;\n} __attribute__((packed));\n\n/*Ip Header => https://github.com/torvalds/linux/blob/master/include/uapi/linux/ip.h */\n/*The \"_\" is useful if mode=XDP_SBK, since already named iphdr*/\nstruct iphdr_ {\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u8    ihl:4,\n        version:4;\n#elif defined (__BIG_ENDIAN_BITFIELD)\n    __u8    version:4,\n        ihl:4;\n#else\n#error  \"Please fix <asm/byteorder.h>\"\n#endif\n    __u8 tos;\n    __be16 tot_len;\n    __be16 id;\n    __be16 frag_off;\n    __u8 ttl;\n    __u8 protocol;\n    __sum16 check;\n    __be32 saddr;\n    __be32 daddr;\n    /*The options start here. */\n} __attribute__((packed));\n\n/*TCP Header => https://github.com/torvalds/linux/blob/master/include/uapi/linux/tcp.h */\nstruct tcphdr {\n    __be16 source;\n    __be16 dest;\n    __be32 seq;\n    __be32 ack_seq;\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u16   res1:4,\n        doff:4,\n        fin:1,\n        syn:1,\n        rst:1,\n        psh:1,\n        ack:1,\n        urg:1,\n        ece:1,\n        cwr:1;\n#elif defined(__BIG_ENDIAN_BITFIELD)\n    __u16   doff:4,\n        res1:4,\n        cwr:1,\n        ece:1,\n        urg:1,\n        ack:1,\n        psh:1,\n        rst:1,\n        syn:1,\n        fin:1;\n#else\n#error  \"Adjust your <asm/byteorder.h> defines\"\n#endif\n    __be16 window;\n    __sum16 check;\n    __be16 urg_ptr;\n} __attribute__((packed));\n\n/*UDP Header https://github.com/torvalds/linux/blob/master/include/uapi/linux/udp.h */\nstruct udphdr {\n    __be16 source;\n    __be16 dest;\n    __be16 len;\n    __sum16 check;\n} __attribute__((packed));\n\n/*Tracked session map*/\n#if POLYCUBE_PROGRAM_TYPE == 0 \nBPF_TABLE_SHARED(\"percpu_hash\", struct session_key, struct features, SESSIONS_TRACKED_CRYPTO, N_SESSION);\n#else\nBPF_TABLE(\"extern\", struct session_key, struct features, SESSIONS_TRACKED_CRYPTO, N_SESSION);\n#endif\n\n/*Method to return the session identifier, with the lower IP as first member*/\nstatic __always_inline struct session_key get_key(uint32_t ip_a, uint32_t ip_b, uint16_t port_a, uint16_t port_b, uint8_t proto) {\n  if(ip_a < ip_b) {\n    struct session_key ret = {.saddr=ip_a, .daddr=ip_b, .sport=port_a, .dport=port_b, .proto=proto};\n    return ret;\n  } else {\n    struct session_key ret = {.saddr=ip_b, .daddr=ip_a, .sport=port_b, .dport=port_a, .proto=proto};\n    return ret;\n  }\n}\n\n/*Method to determine which member of the communication is the server*/\nstatic __always_inline __be32 heuristic_server(uint32_t src_ip, uint32_t dst_ip, uint16_t src_port, uint16_t dst_port, uint32_t *method, struct tcphdr *tcp) {\n  /*If Syn, then srcIp is the server*/\n  if(tcp && tcp->syn) {/*If source port < 1024, then srcIp is the server*/\n    *method = 1;\n    return tcp->ack? src_ip : dst_ip;\n  }\n  dst_port = bpf_htons(dst_port);\n  /*If destination port < 1024, then dstIp is the server*/\n  if(dst_port < 1024) {\n    *method = 2;\n    return dst_ip;\n  }\n  src_port = bpf_htons(src_port);\n  /*If source port < 1024, then srcIp is the server*/\n  if(src_port < 1024) {\n    *method = 2;\n    return src_ip;\n  }\n  *method = 3;\n  /*Otherwise, the lowest port is the server*/\n  return dst_port <= src_port ? dst_ip : src_ip;\n}\n\nstatic __always_inline void do_update(struct features *value, uint64_t len, uint64_t curr_time, bool cond) {\n  if (cond) {\n    value->n_packets += 1;\n    value->n_bytes += len;\n  } else {\n    value->n_packets_reverse += 1;\n    value->n_bytes_reverse += len;\n  }\n  value->alive_timestamp = curr_time;\n}\n\n\nstatic __always_inline int handle_rx(struct CTXTYPE *ctx, struct pkt_metadata *md) {\n  void *data = (void *) (long) ctx->data;\n  void *data_end = (void *) (long) ctx->data_end;\n\n  /*Parsing L2*/\n  struct eth_hdr *ethernet = data;\n  if (data + sizeof(*ethernet) > data_end)\n    return RX_OK;\n\n  if (ethernet->proto != bpf_htons(ETH_P_IP))\n    return RX_OK;\n\n  /*Parsing L3*/\n  struct iphdr_ *ip = data + sizeof(struct eth_hdr);\n  if (data + sizeof(struct eth_hdr) + sizeof(*ip) > data_end)\n    return RX_OK;\n  if ((int) ip->version != 4)\n    return RX_OK;\n\n  /*Calculating ip header length\n   * value to multiply by 4 (SHL 2)\n   *e.g. ip->ihl = 5 ; TCP Header starts at = 5 x 4 byte = 20 byte */\n  uint8_t ip_header_len = ip->ihl << 2;\n  \n  switch (ip->protocol) {\n    case IPPROTO_TCP: {\n      /*Parsing L4 TCP*/\n      struct tcphdr *tcp = data + sizeof(struct eth_hdr) + ip_header_len;\n      if ((void *) tcp + sizeof(*tcp) > data_end) {\n        return RX_OK;\n      }\n\n      uint64_t curr_time = pcn_get_time_epoch();\n      struct session_key key = get_key(ip->saddr, ip->daddr, tcp->source, tcp->dest, ip->protocol);\n\n      /*Check if match*/\n      struct features *value = SESSIONS_TRACKED_CRYPTO.lookup(&key);\n      if (!value) {\n        uint32_t method;\n        uint32_t server_ip = heuristic_server(ip->saddr, ip->daddr, tcp->source, tcp->dest, &method, tcp);\n        struct features zero = {.start_timestamp=curr_time, .method=method, .server_ip=server_ip};\n        SESSIONS_TRACKED_CRYPTO.insert(&key, &zero);\n        value = SESSIONS_TRACKED_CRYPTO.lookup(&key);\n        if (!value) {\n          return RX_OK;\n        }\n      }\n\n      /*Update current session*/\n      do_update(value, bpf_ntohs(ip->tot_len), curr_time, ip->saddr == key.saddr);\n      break;\n    }\n    case IPPROTO_UDP: {\n      /*Parsing L4 UDP*/\n      struct udphdr *udp = data + sizeof(struct eth_hdr) + ip_header_len;\n      if ((void *) udp + sizeof(*udp) > data_end) {\n        return RX_OK;\n      }\n\n      uint64_t curr_time = pcn_get_time_epoch();\n      struct session_key key = get_key(ip->saddr, ip->daddr, udp->source, udp->dest, ip->protocol);\n\n      /*Check if match*/\n      struct features *value = SESSIONS_TRACKED_CRYPTO.lookup(&key);\n      if (!value) {\n        uint32_t method;\n        uint32_t server_ip = heuristic_server(ip->saddr, ip->daddr, udp->source, udp->dest, &method, NULL);\n        struct features zero = {.start_timestamp=curr_time, .method=method, .server_ip=server_ip};\n        SESSIONS_TRACKED_CRYPTO.insert(&key, &zero);\n        value = SESSIONS_TRACKED_CRYPTO.lookup(&key);\n        if (!value) {\n          return RX_OK;\n        }\n      }\n\n      /*Update current session*/\n      do_update(value, bpf_ntohs(ip->tot_len), curr_time, ip->saddr == key.saddr);\n      break;\n    }\n    /*Ignored protocols*/\n    default: {\n      return RX_OK;\n    }\n  }\n\n  /* Here operations after the capture */\n  return RX_OK;\n}\n",
        "metric-configs": [
            {
                "name": "SESSIONS_TRACKED_CRYPTO",
                "map-name": "SESSIONS_TRACKED_CRYPTO",
                "extraction-options": {
                    "swap-on-read": true,
                    "empty-on-read": true
                }
            }
        ]
    },
    "egress-path": {
        "name": "Packets feature extractor",
        "code": "/**\n * eBPF C program to be dynamically injected in the kernel.\n * The aim of this program is to extract some info concerning many packets passing through the interface in order to prevent a possible attack.\n * By now the following protocols are checked:\n *  - TCP\n *  - UDP\n *\n * VERSION: 1.0\n */\n\n/*Protocol types according to the standard*/\n#define IPPROTO_TCP 6\n#define IPPROTO_UDP 17\n\n/* Number of max TCP session tracked */\n#define N_SESSION 10000\n\n/*Features to be exported*/\nstruct features {\n    //Real features\n    uint64_t n_packets;                             // Number of packets on one direction\n    uint64_t n_packets_reverse;                     // Number of packets on opposite direction\n    uint64_t n_bytes;                               // Total bytes on one direction\n    uint64_t n_bytes_reverse;                       // Total bytes on opposite direction\n    uint64_t start_timestamp;                       // Connection begin timestamp\n    uint64_t alive_timestamp;                       // Last message received timestamp\n    uint32_t server_ip;                             // The IP of the server\n    uint32_t method;                                // The method used to determine the server\n} __attribute__((packed));\n\n/*Session identifier*/\nstruct session_key {\n    __be32 saddr;                                   //IP source address\n    __be32 daddr;                                   //IP dest address\n    __be16 sport;                                   //Source port\n    __be16 dport;                                   //Dest port\n    __u8   proto;                                   //Protocol ID\n} __attribute__((packed));\n\n/*Ethernet Header => https://github.com/torvalds/linux/blob/master/include/uapi/linux/if_ether.h (slightly different)*/\nstruct eth_hdr {\n    __be64 dst: 48;\n    __be64 src: 48;\n    __be16 proto;\n} __attribute__((packed));\n\n/*Ip Header => https://github.com/torvalds/linux/blob/master/include/uapi/linux/ip.h */\n/*The \"_\" is useful if mode=XDP_SBK, since already named iphdr*/\nstruct iphdr_ {\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u8    ihl:4,\n        version:4;\n#elif defined (__BIG_ENDIAN_BITFIELD)\n    __u8    version:4,\n        ihl:4;\n#else\n#error  \"Please fix <asm/byteorder.h>\"\n#endif\n    __u8 tos;\n    __be16 tot_len;\n    __be16 id;\n    __be16 frag_off;\n    __u8 ttl;\n    __u8 protocol;\n    __sum16 check;\n    __be32 saddr;\n    __be32 daddr;\n    /*The options start here. */\n} __attribute__((packed));\n\n/*TCP Header => https://github.com/torvalds/linux/blob/master/include/uapi/linux/tcp.h */\nstruct tcphdr {\n    __be16 source;\n    __be16 dest;\n    __be32 seq;\n    __be32 ack_seq;\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u16   res1:4,\n        doff:4,\n        fin:1,\n        syn:1,\n        rst:1,\n        psh:1,\n        ack:1,\n        urg:1,\n        ece:1,\n        cwr:1;\n#elif defined(__BIG_ENDIAN_BITFIELD)\n    __u16   doff:4,\n        res1:4,\n        cwr:1,\n        ece:1,\n        urg:1,\n        ack:1,\n        psh:1,\n        rst:1,\n        syn:1,\n        fin:1;\n#else\n#error  \"Adjust your <asm/byteorder.h> defines\"\n#endif\n    __be16 window;\n    __sum16 check;\n    __be16 urg_ptr;\n} __attribute__((packed));\n\n/*UDP Header https://github.com/torvalds/linux/blob/master/include/uapi/linux/udp.h */\nstruct udphdr {\n    __be16 source;\n    __be16 dest;\n    __be16 len;\n    __sum16 check;\n} __attribute__((packed));\n\n/*Tracked session map*/\n#if POLYCUBE_PROGRAM_TYPE == 0 \nBPF_TABLE(\"extern\", struct session_key, struct features, SESSIONS_TRACKED_CRYPTO, N_SESSION);\n#else\nBPF_TABLE(\"extern\", struct session_key, struct features, SESSIONS_TRACKED_CRYPTO, N_SESSION);\n#endif\n\n/*Method to return the session identifier, with the lower IP as first member*/\nstatic __always_inline struct session_key get_key(uint32_t ip_a, uint32_t ip_b, uint16_t port_a, uint16_t port_b, uint8_t proto) {\n  if(ip_a < ip_b) {\n    struct session_key ret = {.saddr=ip_a, .daddr=ip_b, .sport=port_a, .dport=port_b, .proto=proto};\n    return ret;\n  } else {\n    struct session_key ret = {.saddr=ip_b, .daddr=ip_a, .sport=port_b, .dport=port_a, .proto=proto};\n    return ret;\n  }\n}\n\n/*Method to determine which member of the communication is the server*/\nstatic __always_inline __be32 heuristic_server(uint32_t src_ip, uint32_t dst_ip, uint16_t src_port, uint16_t dst_port, uint32_t *method, struct tcphdr *tcp) {\n  /*If Syn, then srcIp is the server*/\n  if(tcp && tcp->syn) {/*If source port < 1024, then srcIp is the server*/\n    *method = 1;\n    return tcp->ack? src_ip : dst_ip;\n  }\n  dst_port = bpf_htons(dst_port);\n  /*If destination port < 1024, then dstIp is the server*/\n  if(dst_port < 1024) {\n    *method = 2;\n    return dst_ip;\n  }\n  src_port = bpf_htons(src_port);\n  /*If source port < 1024, then srcIp is the server*/\n  if(src_port < 1024) {\n    *method = 2;\n    return src_ip;\n  }\n  *method = 3;\n  /*Otherwise, the lowest port is the server*/\n  return dst_port <= src_port ? dst_ip : src_ip;\n}\n\nstatic __always_inline void do_update(struct features *value, uint64_t len, uint64_t curr_time, bool cond) {\n  if (cond) {\n    value->n_packets += 1;\n    value->n_bytes += len;\n  } else {\n    value->n_packets_reverse += 1;\n    value->n_bytes_reverse += len;\n  }\n  value->alive_timestamp = curr_time;\n}\n\n\nstatic __always_inline int handle_rx(struct CTXTYPE *ctx, struct pkt_metadata *md) {\n  void *data = (void *) (long) ctx->data;\n  void *data_end = (void *) (long) ctx->data_end;\n\n  /*Parsing L2*/\n  struct eth_hdr *ethernet = data;\n  if (data + sizeof(*ethernet) > data_end)\n    return RX_OK;\n\n  if (ethernet->proto != bpf_htons(ETH_P_IP))\n    return RX_OK;\n\n  /*Parsing L3*/\n  struct iphdr_ *ip = data + sizeof(struct eth_hdr);\n  if (data + sizeof(struct eth_hdr) + sizeof(*ip) > data_end)\n    return RX_OK;\n  if ((int) ip->version != 4)\n    return RX_OK;\n\n  /*Calculating ip header length\n   * value to multiply by 4 (SHL 2)\n   *e.g. ip->ihl = 5 ; TCP Header starts at = 5 x 4 byte = 20 byte */\n  uint8_t ip_header_len = ip->ihl << 2;\n  \n  switch (ip->protocol) {\n    case IPPROTO_TCP: {\n      /*Parsing L4 TCP*/\n      struct tcphdr *tcp = data + sizeof(struct eth_hdr) + ip_header_len;\n      if ((void *) tcp + sizeof(*tcp) > data_end) {\n        return RX_OK;\n      }\n\n      uint64_t curr_time = pcn_get_time_epoch();\n      struct session_key key = get_key(ip->saddr, ip->daddr, tcp->source, tcp->dest, ip->protocol);\n\n      /*Check if match*/\n      struct features *value = SESSIONS_TRACKED_CRYPTO.lookup(&key);\n      if (!value) {\n        uint32_t method;\n        uint32_t server_ip = heuristic_server(ip->saddr, ip->daddr, tcp->source, tcp->dest, &method, tcp);\n        struct features zero = {.start_timestamp=curr_time, .method=method, .server_ip=server_ip};\n        SESSIONS_TRACKED_CRYPTO.insert(&key, &zero);\n        value = SESSIONS_TRACKED_CRYPTO.lookup(&key);\n        if (!value) {\n          return RX_OK;\n        }\n      }\n\n      /*Update current session*/\n      do_update(value, bpf_ntohs(ip->tot_len), curr_time, ip->saddr == key.saddr);\n      break;\n    }\n    case IPPROTO_UDP: {\n      /*Parsing L4 UDP*/\n      struct udphdr *udp = data + sizeof(struct eth_hdr) + ip_header_len;\n      if ((void *) udp + sizeof(*udp) > data_end) {\n        return RX_OK;\n      }\n\n      uint64_t curr_time = pcn_get_time_epoch();\n      struct session_key key = get_key(ip->saddr, ip->daddr, udp->source, udp->dest, ip->protocol);\n\n      /*Check if match*/\n      struct features *value = SESSIONS_TRACKED_CRYPTO.lookup(&key);\n      if (!value) {\n        uint32_t method;\n        uint32_t server_ip = heuristic_server(ip->saddr, ip->daddr, udp->source, udp->dest, &method, NULL);\n        struct features zero = {.start_timestamp=curr_time, .method=method, .server_ip=server_ip};\n        SESSIONS_TRACKED_CRYPTO.insert(&key, &zero);\n        value = SESSIONS_TRACKED_CRYPTO.lookup(&key);\n        if (!value) {\n          return RX_OK;\n        }\n      }\n\n      /*Update current session*/\n      do_update(value, bpf_ntohs(ip->tot_len), curr_time, ip->saddr == key.saddr);\n      break;\n    }\n    /*Ignored protocols*/\n    default: {\n      return RX_OK;\n    }\n  }\n\n  /* Here operations after the capture */\n  return RX_OK;\n}\n",
        "metric-configs": [
            {
                "name": "SESSIONS_TRACKED_CRYPTO",
                "map-name": "SESSIONS_TRACKED_CRYPTO",
                "extraction-options": {
                    "swap-on-read": true,
                    "empty-on-read": true
                }
            }
        ]
    }
}