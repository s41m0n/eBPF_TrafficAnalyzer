{
    "name": "Test - TCP session info tracker",
    "code": "/**\n * eBPF C program to be dynamically injected in the kernel.\n * The aim of this program is to extract some info concerning many packets passing through the interface in order to prevent a possible attack.\n * By now the following protocols are checked:\n *  - TCP\n *  - UDP\n *  - ICMP\n */\n\n/*Protocol types according to the standard*/\n#define IPPROTO_TCP 6\n#define IPPROTO_UDP 17\n#define IPPROTO_ICMP 1\n\n/*Own control variables*/\n#define N_SESSION                   10              // Number of max TCP session tracked\n#define N_PACKET_PER_SESSION        10              // Number of packet from the same TCP session\n#define N_PACKET_TOTAL \\\n    N_SESSION * N_PACKET_PER_SESSION                // Number of max packet captured (Size of PACKET_BUFFER)\n#define SESSION_ACCEPT_RESTART_TIME 5000000000      // Seconds to wait before accepting new sessions\n#define SESSION_PACKET_RESTART_TIME 1000000000      // Seconds to wait before restarting to track packets from an already tracked session\n#define BUFFER_PACKET_RESTART_TIME  1000000000      // Seconds to wait before resetting the buffer (5 seconds)\n\n/*Features to be exported*/\nstruct features {\n    //Needed to identify the session\n    uint32_t srcIp;                                 // IP source \n    uint32_t dstIp;                                 // IP dest \n    uint16_t srcPort;                               // Source port in little endian (if ICMP = 0)\n    uint16_t dstPort;                               // Dest port in little endian (if ICMP = 0)\n    uint8_t protocol;                               // Protocol ID\n    //Real features\n    uint64_t timestamp;                             //Packet timestamp\n    uint16_t length;                                //IP length value\n    uint16_t ipFlagsFrag;                           //IP flags\n    uint16_t tcpLen;                                //TCP payload length\n    uint32_t tcpAck;                                //TCP ack n\u00b0\n    uint8_t tcpFlags;                               //TCP flags\n    uint16_t tcpWin;                                //TCP window value\n    uint8_t udpSize;                                //UDP payload length\n    uint8_t icmpType;                               //ICMP operation type\n} __attribute__((packed));\n\n/*Session identifier*/\nstruct session_key {\n    __be32 saddr;                                   //IP source address\n    __be32 daddr;                                   //IP dest address\n    __be16 sport;                                   //Source port (if ICMP = 0)\n    __be16 dport;                                   //Dest port (if ICMP = 0)\n    __u8   proto;                                   //Protocol ID\n} __attribute__((packed));\n\n/*Session value*/\nstruct session_value {\n  uint64_t last_ins_tstamp;                         // Timestamp of last packet inserted for that session\n  uint32_t n_packets;                               // Total number of packet stored for that session since reset\n} __attribute__((packed));\n\n/*Structure containing info about capture*/\nstruct capture_info {\n    unsigned int next_index;                        // The nex position in the PACKET_BUFFER to insert the packet\n    unsigned int n_session_tracking;                // Number of actual tracked sessions\n    uint64_t last_session_ins_tstamp;               // Timestamp of the last session inserted\n    uint64_t last_packet_ins_tstamp;                // Timestamp of the last packet inserted\n} __attribute__((packed));\n\n/*Ethernet Header => https://github.com/torvalds/linux/blob/master/include/uapi/linux/if_ether.h (slightly different)*/\nstruct eth_hdr {\n    __be64 dst: 48;\n    __be64 src: 48;\n    __be16 proto;\n} __attribute__((packed));\n\n/*Ip Header => https://github.com/torvalds/linux/blob/master/include/uapi/linux/ip.h */\nstruct iphdr {\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u8    ihl:4,\n        version:4;\n#elif defined (__BIG_ENDIAN_BITFIELD)\n    __u8    version:4,\n        ihl:4;\n#else\n#error  \"Please fix <asm/byteorder.h>\"\n#endif\n    __u8 tos;\n    __be16 tot_len;\n    __be16 id;\n    __be16 frag_off;\n    __u8 ttl;\n    __u8 protocol;\n    __sum16 check;\n    __be32 saddr;\n    __be32 daddr;\n    /*The options start here. */\n} __attribute__((packed));\n\n/*TCP Header => https://github.com/torvalds/linux/blob/master/include/uapi/linux/tcp.h */\nstruct tcphdr {\n    __be16 source;\n    __be16 dest;\n    __be32 seq;\n    __be32 ack_seq;\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u16   res1:4,\n        doff:4,\n        fin:1,\n        syn:1,\n        rst:1,\n        psh:1,\n        ack:1,\n        urg:1,\n        ece:1,\n        cwr:1;\n#elif defined(__BIG_ENDIAN_BITFIELD)\n    __u16   doff:4,\n        res1:4,\n        cwr:1,\n        ece:1,\n        urg:1,\n        ack:1,\n        psh:1,\n        rst:1,\n        syn:1,\n        fin:1;\n#else\n#error  \"Adjust your <asm/byteorder.h> defines\"\n#endif\n    __be16 window;\n    __sum16 check;\n    __be16 urg_ptr;\n} __attribute__((packed));\n\n/*UDP Header https://github.com/torvalds/linux/blob/master/include/uapi/linux/udp.h */\nstruct udphdr {\n    __be16 source;\n    __be16 dest;\n    __be16 len;\n    __sum16 check;\n} __attribute__((packed));\n\n/*ICMP Header https://github.com/torvalds/linux/blob/master/include/uapi/linux/icmp.h*/\nstruct icmphdr {\n    __u8 type;\n    __u8 code;\n    __sum16 checksum;\n    union {\n        struct {\n            __be16 id;\n            __be16 sequence;\n        } echo;\n        __be32 gateway;\n        struct {\n            __be16 __unused;\n            __be16 mtu;\n        } frag;\n        __u8 reserved[4];\n    } un;\n} __attribute__((packed));\n\n/*Structures shared between Control Plane - Data Plane*/\nBPF_ARRAY(CAPTURE_INFO, struct capture_info, 1);\nBPF_ARRAY(PACKET_BUFFER, struct features, N_PACKET_TOTAL);\n/*Tracked session LRU map*/\nBPF_TABLE(\"lru_hash\", struct session_key, struct session_value, SESSIONS_TRACKED, N_SESSION);\n\n/*Utility function to check if a session is already tracked and can take the current packet into account. If it is not tracked, try to do it.*/\nstatic __always_inline int check_or_try_add_session(struct session_key *key, struct capture_info *cinfo, uint64_t curr_time) {\n  struct session_value *value = SESSIONS_TRACKED.lookup(key);\n  if (!value) {\n    /*Check if I can accept new sessions*/\n    if(cinfo->n_session_tracking == N_SESSION) {\n      /*Check if the last session accepted was long time ago*/\n      if(curr_time - cinfo->last_session_ins_tstamp < SESSION_ACCEPT_RESTART_TIME) {\n        return 1;\n      }\n      /*Start accepting new session, OVERRIDING older ones*/\n      cinfo->n_session_tracking = 0; \n    }\n    /*New session accepted*/\n    struct session_value newVal = {.last_ins_tstamp=curr_time, .n_packets=1};\n    SESSIONS_TRACKED.insert(key, &newVal);\n    cinfo->n_session_tracking += 1;\n    cinfo->last_session_ins_tstamp = curr_time;\n  } else {\n    /*Checking if reached number of packets per session stored*/\n    if(value->n_packets == N_PACKET_PER_SESSION) {\n        /*Checking if passed enough time since the last packed stored*/\n        if(curr_time - value->last_ins_tstamp < SESSION_PACKET_RESTART_TIME) {\n            return 1;\n        }\n        /*Restart considering packets for that session*/\n        value->n_packets = 0;\n    }\n    /*Already present session*/\n    value->last_ins_tstamp = curr_time;\n    value->n_packets +=1;  \n  }\n  return 0;\n}\n\nstatic __always_inline int handle_rx(struct CTXTYPE *ctx, struct pkt_metadata *md) {\n  void *data = (void *) (long) ctx->data;\n  void *data_end = (void *) (long) ctx->data_end;\n\n  /*Parsing L2*/\n  struct eth_hdr *ethernet = data;\n  if (data + sizeof(*ethernet) > data_end)\n    return RX_OK;\n\n  if (ethernet->proto != bpf_htons(ETH_P_IP))\n    return RX_OK;\n\n  /*Parsing L3*/\n  struct iphdr *ip = data + sizeof(struct eth_hdr);\n  if (data + sizeof(struct eth_hdr) + sizeof(*ip) > data_end)\n    return RX_OK;\n  if ((int) ip->version != 4)\n    return RX_OK;\n\n  /*Checking for considered protocols*/\n  if (ip->protocol != IPPROTO_TCP && ip->protocol != IPPROTO_UDP && ip->protocol != IPPROTO_ICMP) {\n    return RX_OK;\n  }\n\n  /*Retrieving capture information*/\n  unsigned int key = 0;\n  struct capture_info *cinfo = CAPTURE_INFO.lookup(&key);\n  if (!cinfo){\n      return RX_OK;\n  }\n\n  /*Checking if packed is already timestamped, otherwise get it from kernel bpf function*/\n  uint64_t curr_time = ctx->tstamp == 0? bpf_ktime_get_ns() : ctx->tstamp;\n\n  /*Checking if array of captured packets is full*/\n  if(cinfo->next_index == N_PACKET_TOTAL) {\n    /*Checking if last insertion happened 10s ago*/\n    if(curr_time - cinfo->last_packet_ins_tstamp < BUFFER_PACKET_RESTART_TIME) {\n      return RX_OK;\n    }\n    /*Reset head to zero to start extracting packet feature again*/\n    cinfo->next_index = 0;\n  }\n\n  /*Retrieving current features slot*/\n  struct features *pkt_info =  PACKET_BUFFER.lookup(&cinfo->next_index);\n  if (!pkt_info){\n      return RX_OK;\n  }\n\n  /*Calculating ip header length\n   * value to multiply by 4 (SHL 2)\n   *e.g. ip->ihl = 5 ; TCP Header starts at = 5 x 4 byte = 20 byte */\n  uint8_t ip_header_len = ip->ihl << 2;\n\n  switch (ip->protocol) {\n    case IPPROTO_TCP: {\n      /*Parsing L4 TCP*/\n      struct tcphdr *tcp = data + sizeof(struct eth_hdr) + ip_header_len;\n      if ((void *) tcp + sizeof(*tcp) > data_end) {\n        return RX_OK;\n      }\n      /*Check if it is already tracked or try to track it*/\n      struct session_key key = {.saddr=ip->saddr, .daddr=ip->daddr, .sport=tcp->source, .dport=tcp->dest, .proto=ip->protocol};\n      if(check_or_try_add_session(&key, cinfo, curr_time) != 0) {\n        return RX_OK;\n      }\n\n      /*Now I'm sure to take the packet*/\n      uint16_t len = bpf_ntohs(ip->tot_len);\n      struct features newFeatures = {.srcPort=bpf_htons(tcp->source), .dstPort=bpf_htons(tcp->dest), .length=len, \n        .tcpAck=tcp->ack_seq, .tcpWin=bpf_ntohs(tcp->window), .tcpLen=(uint16_t)(len - ip_header_len - sizeof(*tcp)), \n        .tcpFlags=(tcp->cwr << 7) | (tcp->ece << 6) | (tcp->urg << 5) | (tcp->ack << 4)\n                | (tcp->psh << 3)| (tcp->rst << 2) | (tcp->syn << 1) | tcp->fin};\n      \n      *pkt_info = newFeatures;\n      break;\n    }\n    case IPPROTO_ICMP: {\n      /*Parsing L4 ICMP*/\n      struct icmphdr *icmp = data + sizeof(struct eth_hdr) + ip_header_len;\n      if ((void *) icmp + sizeof(*icmp) > data_end) {\n        return RX_OK;\n      }\n\n      /*Check if it is already tracked or try to track it*/\n      struct session_key key = {.saddr=ip->saddr, .daddr=ip->daddr, .sport=0, .dport=0, .proto=ip->protocol};\n      if(check_or_try_add_session(&key, cinfo, curr_time) != 0) {\n        return RX_OK;\n      }\n\n      /*Now I'm sure to take the packet*/\n      uint16_t len = bpf_ntohs(ip->tot_len);\n      struct features newFeatures = {.length=len, .icmpType=icmp->type};\n      \n      *pkt_info = newFeatures;\n      break;\n    }\n    case IPPROTO_UDP: {\n      /*Parsing L4 UDP*/\n      struct udphdr *udp = data + sizeof(struct eth_hdr) + ip_header_len;\n      if ((void *) udp + sizeof(*udp) > data_end) {\n        return RX_OK;\n      }\n\n      struct session_key key = {.saddr=ip->saddr, .daddr=ip->daddr, .sport=udp->source, .dport=udp->dest, .proto=ip->protocol};\n      /*Check if it is already tracked or try to track it*/\n      if(check_or_try_add_session(&key, cinfo, curr_time) != 0) {\n        return RX_OK;\n      }\n\n      /*Now I'm sure to take the packet*/\n      uint16_t len = bpf_ntohs(ip->tot_len);\n      struct features newFeatures = {.srcPort=bpf_htons(udp->source), .dstPort=bpf_htons(udp->dest), .length=len, .udpSize=bpf_ntohs(udp->len) - sizeof(*udp)};\n      \n      *pkt_info = newFeatures;\n      break;\n    }\n    /*Should never reach this code since already checked*/\n    default : {\n      return RX_OK;\n    }\n  }\n\n  /*Setting packet features*/\n  pkt_info->srcIp = bpf_ntohl(ip->saddr);\n  pkt_info->dstIp = bpf_ntohl(ip->daddr);\n  pkt_info->protocol = ip->protocol;\n  pkt_info->timestamp = curr_time;\n  pkt_info->ipFlagsFrag = bpf_ntohs(ip->frag_off);\n   \n  /*pcn_log(ctx, LOG_TRACE, \"Inserted Packet at index: %u \", cinfo->next_index);*/\n\n  /*The capture was fine, update last timestamp and index*/\n  cinfo->last_packet_ins_tstamp = curr_time;\n  cinfo->next_index += 1;\n  return RX_OK;\n}",
    "metrics": []
}